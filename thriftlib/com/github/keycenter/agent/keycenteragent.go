// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package agent

import (
	"bytes"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type KeycenterAgent interface {
	// 加密数据
	// @param sid service id
	// @param raw 原始数据
	// @param userOnlySecret 额外的 secret 用作加密
	// @param compressType 压缩类型
	//
	//
	// Parameters:
	//  - Sid
	//  - Raw
	//  - UserOnlySecret
	//  - CompressType
	Encrypt(sid string, raw []byte, userOnlySecret []byte, compressType CompressionType) (r []byte, err error)
	// 解密数据
	// @param sid service id
	// @param cipher 需要解密的密文
	// @param userOnlySecret 额外的 secret 用作解密
	// @param compressType 压缩类型
	//
	//
	// Parameters:
	//  - Sid
	//  - Cipher
	//  - UserOnlySecret
	//  - CompressType
	Decrypt(sid string, cipher []byte, userOnlySecret []byte, compressType CompressionType) (r []byte, err error)
}

type KeycenterAgentClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewKeycenterAgentClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *KeycenterAgentClient {
	return &KeycenterAgentClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewKeycenterAgentClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *KeycenterAgentClient {
	return &KeycenterAgentClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// 加密数据
// @param sid service id
// @param raw 原始数据
// @param userOnlySecret 额外的 secret 用作加密
// @param compressType 压缩类型
//
//
// Parameters:
//  - Sid
//  - Raw
//  - UserOnlySecret
//  - CompressType
func (p *KeycenterAgentClient) Encrypt(sid string, raw []byte, userOnlySecret []byte, compressType CompressionType) (r []byte, err error) {
	if err = p.sendEncrypt(sid, raw, userOnlySecret, compressType); err != nil {
		return
	}
	return p.recvEncrypt()
}

func (p *KeycenterAgentClient) sendEncrypt(sid string, raw []byte, userOnlySecret []byte, compressType CompressionType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("encrypt", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := KeycenterAgentEncryptArgs{
		Sid:            sid,
		Raw:            raw,
		UserOnlySecret: userOnlySecret,
		CompressType:   compressType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *KeycenterAgentClient) recvEncrypt() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "encrypt" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "encrypt failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "encrypt failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "encrypt failed: invalid message type")
		return
	}
	result := KeycenterAgentEncryptResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ke != nil {
		err = result.Ke
		return
	}
	value = result.GetSuccess()
	return
}

// 解密数据
// @param sid service id
// @param cipher 需要解密的密文
// @param userOnlySecret 额外的 secret 用作解密
// @param compressType 压缩类型
//
//
// Parameters:
//  - Sid
//  - Cipher
//  - UserOnlySecret
//  - CompressType
func (p *KeycenterAgentClient) Decrypt(sid string, cipher []byte, userOnlySecret []byte, compressType CompressionType) (r []byte, err error) {
	if err = p.sendDecrypt(sid, cipher, userOnlySecret, compressType); err != nil {
		return
	}
	return p.recvDecrypt()
}

func (p *KeycenterAgentClient) sendDecrypt(sid string, cipher []byte, userOnlySecret []byte, compressType CompressionType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("decrypt", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := KeycenterAgentDecryptArgs{
		Sid:            sid,
		Cipher:         cipher,
		UserOnlySecret: userOnlySecret,
		CompressType:   compressType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *KeycenterAgentClient) recvDecrypt() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "decrypt" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "decrypt failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "decrypt failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "decrypt failed: invalid message type")
		return
	}
	result := KeycenterAgentDecryptResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ke != nil {
		err = result.Ke
		return
	}
	value = result.GetSuccess()
	return
}

type KeycenterAgentProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      KeycenterAgent
}

func (p *KeycenterAgentProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *KeycenterAgentProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *KeycenterAgentProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewKeycenterAgentProcessor(handler KeycenterAgent) *KeycenterAgentProcessor {

	self4 := &KeycenterAgentProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["encrypt"] = &keycenterAgentProcessorEncrypt{handler: handler}
	self4.processorMap["decrypt"] = &keycenterAgentProcessorDecrypt{handler: handler}
	return self4
}

func (p *KeycenterAgentProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x5.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x5

}

type keycenterAgentProcessorEncrypt struct {
	handler KeycenterAgent
}

func (p *keycenterAgentProcessorEncrypt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := KeycenterAgentEncryptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("encrypt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := KeycenterAgentEncryptResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.Encrypt(args.Sid, args.Raw, args.UserOnlySecret, args.CompressType); err2 != nil {
		switch v := err2.(type) {
		case *KeycenterException:
			result.Ke = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing encrypt: "+err2.Error())
			oprot.WriteMessageBegin("encrypt", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("encrypt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type keycenterAgentProcessorDecrypt struct {
	handler KeycenterAgent
}

func (p *keycenterAgentProcessorDecrypt) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := KeycenterAgentDecryptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("decrypt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := KeycenterAgentDecryptResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.Decrypt(args.Sid, args.Cipher, args.UserOnlySecret, args.CompressType); err2 != nil {
		switch v := err2.(type) {
		case *KeycenterException:
			result.Ke = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decrypt: "+err2.Error())
			oprot.WriteMessageBegin("decrypt", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("decrypt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Sid
//  - Raw
//  - UserOnlySecret
//  - CompressType
type KeycenterAgentEncryptArgs struct {
	Sid            string          `thrift:"sid,1" json:"sid"`
	Raw            []byte          `thrift:"raw,2" json:"raw"`
	UserOnlySecret []byte          `thrift:"userOnlySecret,3" json:"userOnlySecret"`
	CompressType   CompressionType `thrift:"compressType,4" json:"compressType"`
}

func NewKeycenterAgentEncryptArgs() *KeycenterAgentEncryptArgs {
	return &KeycenterAgentEncryptArgs{}
}

func (p *KeycenterAgentEncryptArgs) GetSid() string {
	return p.Sid
}

func (p *KeycenterAgentEncryptArgs) GetRaw() []byte {
	return p.Raw
}

func (p *KeycenterAgentEncryptArgs) GetUserOnlySecret() []byte {
	return p.UserOnlySecret
}

func (p *KeycenterAgentEncryptArgs) GetCompressType() CompressionType {
	return p.CompressType
}
func (p *KeycenterAgentEncryptArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KeycenterAgentEncryptArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Sid = v
	}
	return nil
}

func (p *KeycenterAgentEncryptArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Raw = v
	}
	return nil
}

func (p *KeycenterAgentEncryptArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserOnlySecret = v
	}
	return nil
}

func (p *KeycenterAgentEncryptArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := CompressionType(v)
		p.CompressType = temp
	}
	return nil
}

func (p *KeycenterAgentEncryptArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("encrypt_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeycenterAgentEncryptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sid: ", p), err)
	}
	return err
}

func (p *KeycenterAgentEncryptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("raw", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:raw: ", p), err)
	}
	if err := oprot.WriteBinary(p.Raw); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.raw (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:raw: ", p), err)
	}
	return err
}

func (p *KeycenterAgentEncryptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userOnlySecret", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userOnlySecret: ", p), err)
	}
	if err := oprot.WriteBinary(p.UserOnlySecret); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userOnlySecret (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userOnlySecret: ", p), err)
	}
	return err
}

func (p *KeycenterAgentEncryptArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compressType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:compressType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CompressType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.compressType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:compressType: ", p), err)
	}
	return err
}

func (p *KeycenterAgentEncryptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeycenterAgentEncryptArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ke
type KeycenterAgentEncryptResult struct {
	Success []byte              `thrift:"success,0" json:"success,omitempty"`
	Ke      *KeycenterException `thrift:"ke,1" json:"ke,omitempty"`
}

func NewKeycenterAgentEncryptResult() *KeycenterAgentEncryptResult {
	return &KeycenterAgentEncryptResult{}
}

var KeycenterAgentEncryptResult_Success_DEFAULT []byte

func (p *KeycenterAgentEncryptResult) GetSuccess() []byte {
	return p.Success
}

var KeycenterAgentEncryptResult_Ke_DEFAULT *KeycenterException

func (p *KeycenterAgentEncryptResult) GetKe() *KeycenterException {
	if !p.IsSetKe() {
		return KeycenterAgentEncryptResult_Ke_DEFAULT
	}
	return p.Ke
}
func (p *KeycenterAgentEncryptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KeycenterAgentEncryptResult) IsSetKe() bool {
	return p.Ke != nil
}

func (p *KeycenterAgentEncryptResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KeycenterAgentEncryptResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *KeycenterAgentEncryptResult) readField1(iprot thrift.TProtocol) error {
	p.Ke = &KeycenterException{}
	if err := p.Ke.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ke), err)
	}
	return nil
}

func (p *KeycenterAgentEncryptResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("encrypt_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeycenterAgentEncryptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *KeycenterAgentEncryptResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKe() {
		if err := oprot.WriteFieldBegin("ke", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ke: ", p), err)
		}
		if err := p.Ke.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ke), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ke: ", p), err)
		}
	}
	return err
}

func (p *KeycenterAgentEncryptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeycenterAgentEncryptResult(%+v)", *p)
}

// Attributes:
//  - Sid
//  - Cipher
//  - UserOnlySecret
//  - CompressType
type KeycenterAgentDecryptArgs struct {
	Sid            string          `thrift:"sid,1" json:"sid"`
	Cipher         []byte          `thrift:"cipher,2" json:"cipher"`
	UserOnlySecret []byte          `thrift:"userOnlySecret,3" json:"userOnlySecret"`
	CompressType   CompressionType `thrift:"compressType,4" json:"compressType"`
}

func NewKeycenterAgentDecryptArgs() *KeycenterAgentDecryptArgs {
	return &KeycenterAgentDecryptArgs{}
}

func (p *KeycenterAgentDecryptArgs) GetSid() string {
	return p.Sid
}

func (p *KeycenterAgentDecryptArgs) GetCipher() []byte {
	return p.Cipher
}

func (p *KeycenterAgentDecryptArgs) GetUserOnlySecret() []byte {
	return p.UserOnlySecret
}

func (p *KeycenterAgentDecryptArgs) GetCompressType() CompressionType {
	return p.CompressType
}
func (p *KeycenterAgentDecryptArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KeycenterAgentDecryptArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Sid = v
	}
	return nil
}

func (p *KeycenterAgentDecryptArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cipher = v
	}
	return nil
}

func (p *KeycenterAgentDecryptArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UserOnlySecret = v
	}
	return nil
}

func (p *KeycenterAgentDecryptArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := CompressionType(v)
		p.CompressType = temp
	}
	return nil
}

func (p *KeycenterAgentDecryptArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decrypt_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeycenterAgentDecryptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sid: ", p), err)
	}
	return err
}

func (p *KeycenterAgentDecryptArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cipher", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cipher: ", p), err)
	}
	if err := oprot.WriteBinary(p.Cipher); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cipher (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cipher: ", p), err)
	}
	return err
}

func (p *KeycenterAgentDecryptArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userOnlySecret", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userOnlySecret: ", p), err)
	}
	if err := oprot.WriteBinary(p.UserOnlySecret); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userOnlySecret (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userOnlySecret: ", p), err)
	}
	return err
}

func (p *KeycenterAgentDecryptArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compressType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:compressType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CompressType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.compressType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:compressType: ", p), err)
	}
	return err
}

func (p *KeycenterAgentDecryptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeycenterAgentDecryptArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ke
type KeycenterAgentDecryptResult struct {
	Success []byte              `thrift:"success,0" json:"success,omitempty"`
	Ke      *KeycenterException `thrift:"ke,1" json:"ke,omitempty"`
}

func NewKeycenterAgentDecryptResult() *KeycenterAgentDecryptResult {
	return &KeycenterAgentDecryptResult{}
}

var KeycenterAgentDecryptResult_Success_DEFAULT []byte

func (p *KeycenterAgentDecryptResult) GetSuccess() []byte {
	return p.Success
}

var KeycenterAgentDecryptResult_Ke_DEFAULT *KeycenterException

func (p *KeycenterAgentDecryptResult) GetKe() *KeycenterException {
	if !p.IsSetKe() {
		return KeycenterAgentDecryptResult_Ke_DEFAULT
	}
	return p.Ke
}
func (p *KeycenterAgentDecryptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KeycenterAgentDecryptResult) IsSetKe() bool {
	return p.Ke != nil
}

func (p *KeycenterAgentDecryptResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KeycenterAgentDecryptResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *KeycenterAgentDecryptResult) readField1(iprot thrift.TProtocol) error {
	p.Ke = &KeycenterException{}
	if err := p.Ke.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ke), err)
	}
	return nil
}

func (p *KeycenterAgentDecryptResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decrypt_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeycenterAgentDecryptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *KeycenterAgentDecryptResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKe() {
		if err := oprot.WriteFieldBegin("ke", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ke: ", p), err)
		}
		if err := p.Ke.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ke), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ke: ", p), err)
		}
	}
	return err
}

func (p *KeycenterAgentDecryptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeycenterAgentDecryptResult(%+v)", *p)
}
